import os
import json


class CstSeparators:
    nodes = '\n=@|+|===-=)!(@$*&^(===\n'
    type_and_sources = '\n::::_|+|:::::\n'
    node_level = '-|+|/:'


class AstHelper:
    folder = 'ast'

    @staticmethod
    def add_node(nodes, type, chars):
        node = {'type': type}

        if chars is not None:
            node['chars'] = chars

        nodes.append(node)

    @staticmethod
    def text2json(file, with_code):
        """
        Convert file with AST (generated by custom kotlin compiler - "academic version") to JSON
        """
        f = open(file, 'r')
        nodes = f.read().split(CstSeparators.nodes)
        current_nodes = []
        current_level = 1
        parent_nodes = []
        for node_row in nodes:
            node = node_row.split(CstSeparators.type_and_sources)
            if len(node) < 2:
                continue
            node_type = node[0]
            node_chars = node[1]
            level = node_type.count(CstSeparators.node_level)
            node_type_clear = node_type.split(CstSeparators.node_level)
            node_type_clear = node_type_clear[len(node_type_clear) - 1]

            if level == current_level:
                AstHelper.add_node(current_nodes, node_type_clear, node_chars if with_code else None)
            elif level > current_level:
                last_node = current_nodes[len(current_nodes) - 1]
                parent_nodes.append(current_nodes)
                last_node['children'] = []
                AstHelper.add_node(last_node['children'], node_type_clear, node_chars if with_code else None)
                current_nodes = last_node['children']
                current_level = level
            elif level < current_level:
                i = 0
                while i < current_level - level:
                    current_nodes = parent_nodes.pop()
                    i += 1
                AstHelper.add_node(current_nodes, node_type_clear, node_chars if with_code else None)
                current_level = level
        f.close()
        os.remove('ast.data')

        while len(parent_nodes) != 0:
            current_nodes = parent_nodes.pop()

        ast_json = json.dumps(current_nodes)

        return ast_json
